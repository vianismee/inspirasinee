-- =====================================================
-- INSPIRASINEE REFERRAL AND POINTS SYSTEM MIGRATION
-- =====================================================
-- Comprehensive database migration for referral and points system
-- Run this in your Supabase SQL Editor
-- =====================================================

-- STEP 1: Create referral settings table
CREATE TABLE IF NOT EXISTS referral_settings (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    setting_name TEXT NOT NULL UNIQUE,
    setting_value TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- STEP 2: Create customer points table
CREATE TABLE IF NOT EXISTS customer_points (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    customer_id TEXT NOT NULL UNIQUE,
    points_balance INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- STEP 3: Create point transactions table
CREATE TABLE IF NOT EXISTS point_transactions (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    customer_id TEXT NOT NULL,
    transaction_type TEXT NOT NULL CHECK (transaction_type IN ('credit', 'debit')),
    points INTEGER NOT NULL,
    order_invoice_id TEXT,
    related_customer_id TEXT,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- STEP 4: Create customer points summary view
CREATE OR REPLACE VIEW customer_points_summary AS
SELECT
    cp.customer_id,
    cp.points_balance,
    c.username,
    c.whatsapp,
    cp.created_at as points_created_at,
    cp.updated_at as points_updated_at
FROM customer_points cp
LEFT JOIN customers c ON cp.customer_id = c.customer_id;

-- STEP 5: Add referral columns to customers table (if they don't exist)
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'customers' AND column_name = 'referralcode'
    ) THEN
        ALTER TABLE customers ADD COLUMN referralCode TEXT;
        RAISE NOTICE 'Added referralCode column to customers table';
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'customers' AND column_name = 'referralcodevalid'
    ) THEN
        ALTER TABLE customers ADD COLUMN referralCodeValid BOOLEAN DEFAULT FALSE;
        RAISE NOTICE 'Added referralCodeValid column to customers table';
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'customers' AND column_name = 'referraldiscountamount'
    ) THEN
        ALTER TABLE customers ADD COLUMN referralDiscountAmount INTEGER DEFAULT 0;
        RAISE NOTICE 'Added referralDiscountAmount column to customers table';
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'orders' AND column_name = 'referral_code_used'
    ) THEN
        ALTER TABLE orders ADD COLUMN referral_code_used TEXT;
        RAISE NOTICE 'Added referral_code_used column to orders table';
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'orders' AND column_name = 'referral_discount_amount'
    ) THEN
        ALTER TABLE orders ADD COLUMN referral_discount_amount INTEGER DEFAULT 0;
        RAISE NOTICE 'Added referral_discount_amount column to orders table';
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'orders' AND column_name = 'points_used'
    ) THEN
        ALTER TABLE orders ADD COLUMN points_used INTEGER DEFAULT 0;
        RAISE NOTICE 'Added points_used column to orders table';
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns
        WHERE table_name = 'orders' AND column_name = 'points_discount_amount'
    ) THEN
        ALTER TABLE orders ADD COLUMN points_discount_amount INTEGER DEFAULT 0;
        RAISE NOTICE 'Added points_discount_amount column to orders table';
    END IF;
END $$;

-- STEP 6: Insert default referral settings
INSERT INTO referral_settings (setting_name, setting_value) VALUES
    ('new_customer_discount_amount', '5000'),
    ('referrer_points_per_referral', '15'),
    ('point_to_rupiah_conversion_rate', '100')
ON CONFLICT (setting_name) DO NOTHING;

-- STEP 7: Create database functions

-- Function to validate referral code
CREATE OR REPLACE FUNCTION validate_referral_code(p_referral_code TEXT)
RETURNS TABLE(
    is_valid BOOLEAN,
    referrer_id TEXT,
    referrer_name TEXT,
    message TEXT,
    discount_amount INTEGER
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        CASE WHEN c.customer_id IS NOT NULL THEN TRUE ELSE FALSE END as is_valid,
        c.customer_id as referrer_id,
        c.username as referrer_name,
        CASE
            WHEN c.customer_id IS NOT NULL
            THEN 'Referral code applied successfully! You get a discount of Rp ' || (SELECT setting_value::integer FROM referral_settings WHERE setting_name = 'new_customer_discount_amount')::text || '.'
            ELSE 'Invalid referral code'
        END as message,
        (SELECT setting_value::integer FROM referral_settings WHERE setting_name = 'new_customer_discount_amount') as discount_amount
    FROM customers c
    WHERE c.customer_id = p_referral_code;
END;
$$ LANGUAGE plpgsql;

-- Function to ensure customer has points record
CREATE OR REPLACE FUNCTION ensure_customer_points_record(p_customer_id TEXT)
RETURNS BOOLEAN AS $$
DECLARE
    v_exists INTEGER;
BEGIN
    SELECT COUNT(*) INTO v_exists FROM customer_points WHERE customer_id = p_customer_id;

    IF v_exists = 0 THEN
        INSERT INTO customer_points (customer_id, points_balance)
        VALUES (p_customer_id, 0);
    END IF;

    RETURN TRUE;
EXCEPTION WHEN OTHERS THEN
    RETURN FALSE;
END;
$$ LANGUAGE plpgsql;

-- Function to get customer points balance
CREATE OR REPLACE FUNCTION get_customer_points_balance(p_customer_id TEXT)
RETURNS INTEGER AS $$
DECLARE
    v_balance INTEGER;
BEGIN
    SELECT COALESCE(points_balance, 0) INTO v_balance
    FROM customer_points
    WHERE customer_id = p_customer_id;

    RETURN v_balance;
EXCEPTION WHEN OTHERS THEN
    RETURN 0;
END;
$$ LANGUAGE plpgsql;

-- Function to add points to customer
CREATE OR REPLACE FUNCTION add_customer_points(
    p_customer_id TEXT,
    p_points INTEGER,
    p_description TEXT DEFAULT NULL,
    p_order_invoice_id TEXT DEFAULT NULL,
    p_related_customer_id TEXT DEFAULT NULL
)
RETURNS BOOLEAN AS $$
DECLARE
    v_success BOOLEAN;
BEGIN
    -- Ensure customer has points record
    v_success := ensure_customer_points_record(p_customer_id);
    IF NOT v_success THEN
        RETURN FALSE;
    END IF;

    -- Update points balance
    UPDATE customer_points
    SET points_balance = points_balance + p_points,
        updated_at = NOW()
    WHERE customer_id = p_customer_id;

    -- Record transaction
    INSERT INTO point_transactions (
        customer_id,
        transaction_type,
        points,
        order_invoice_id,
        related_customer_id,
        description
    ) VALUES (
        p_customer_id,
        'credit',
        p_points,
        p_order_invoice_id,
        p_related_customer_id,
        p_description
    );

    RETURN TRUE;
EXCEPTION WHEN OTHERS THEN
    RETURN FALSE;
END;
$$ LANGUAGE plpgsql;

-- Function to deduct points from customer
CREATE OR REPLACE FUNCTION deduct_customer_points(
    p_customer_id TEXT,
    p_points INTEGER,
    p_description TEXT DEFAULT NULL,
    p_order_invoice_id TEXT DEFAULT NULL
)
RETURNS BOOLEAN AS $$
DECLARE
    v_current_balance INTEGER;
    v_success BOOLEAN;
BEGIN
    -- Get current balance
    v_current_balance := get_customer_points_balance(p_customer_id);

    -- Check if customer has enough points
    IF v_current_balance < p_points THEN
        RETURN FALSE;
    END IF;

    -- Update points balance
    UPDATE customer_points
    SET points_balance = points_balance - p_points,
        updated_at = NOW()
    WHERE customer_id = p_customer_id;

    -- Record transaction
    INSERT INTO point_transactions (
        customer_id,
        transaction_type,
        points,
        order_invoice_id,
        description
    ) VALUES (
        p_customer_id,
        'debit',
        p_points,
        p_order_invoice_id,
        p_description
    );

    RETURN TRUE;
EXCEPTION WHEN OTHERS THEN
    RETURN FALSE;
END;
$$ LANGUAGE plpgsql;

-- Function to update referral setting
CREATE OR REPLACE FUNCTION update_referral_setting(
    p_setting_name TEXT,
    p_setting_value TEXT
)
RETURNS BOOLEAN AS $$
BEGIN
    UPDATE referral_settings
    SET setting_value = p_setting_value,
        updated_at = NOW()
    WHERE setting_name = p_setting_name;

    RETURN TRUE;
EXCEPTION WHEN OTHERS THEN
    RETURN FALSE;
END;
$$ LANGUAGE plpgsql;

-- Function to safely delete customer and all related data
CREATE OR REPLACE FUNCTION delete_customer_safely(p_customer_id TEXT)
RETURNS BOOLEAN AS $$
BEGIN
    -- With CASCADE constraints, we can delete the customer directly
    -- All related records will be automatically deleted
    DELETE FROM customers
    WHERE customer_id = p_customer_id;

    RETURN TRUE;
EXCEPTION WHEN OTHERS THEN
    RETURN FALSE;
END;
$$ LANGUAGE plpgsql;

-- STEP 8: Create RLS (Row Level Security) policies
ALTER TABLE referral_settings ENABLE ROW LEVEL SECURITY;
ALTER TABLE customer_points ENABLE ROW LEVEL SECURITY;
ALTER TABLE point_transactions ENABLE ROW LEVEL SECURITY;

-- Allow public read access to referral settings
CREATE POLICY "Enable read access for referral settings" ON referral_settings
    FOR SELECT USING (true);

-- Allow authenticated users to manage their own points
CREATE POLICY "Enable individual access for customer points" ON customer_points
    FOR ALL USING (auth.uid()::text = customer_id);

-- Allow authenticated users to view their own transactions
CREATE POLICY "Enable individual access for point transactions" ON point_transactions
    FOR ALL USING (auth.uid()::text = customer_id);

-- STEP 9: Fix foreign key constraints with ON DELETE CASCADE
DO $$
BEGIN
    -- Drop existing foreign key constraint on orders table if it exists
    IF EXISTS (
        SELECT 1 FROM information_schema.table_constraints
        WHERE table_name = 'orders'
        AND constraint_name = 'orders_customer_id_fkey'
        AND constraint_type = 'FOREIGN KEY'
    ) THEN
        ALTER TABLE orders DROP CONSTRAINT orders_customer_id_fkey;
    END IF;

    -- Create new foreign key constraint with ON DELETE CASCADE
    ALTER TABLE orders
    ADD CONSTRAINT orders_customer_id_fkey
    FOREIGN KEY (customer_id)
    REFERENCES customers(customer_id)
    ON DELETE CASCADE;
END $$;

-- STEP 10: Initialize existing customers with points records
INSERT INTO customer_points (customer_id, points_balance)
SELECT customer_id, 0
FROM customers c
WHERE NOT EXISTS (
    SELECT 1 FROM customer_points cp WHERE cp.customer_id = c.customer_id
);

-- STEP 10: Verification queries
-- These will show the results of the migration
SELECT 'Migration completed successfully!' as status;

SELECT 'Referral Settings:' as section;
SELECT * FROM referral_settings ORDER BY setting_name;

SELECT 'Customer Points Records:' as section;
SELECT COUNT(*) as total_records FROM customer_points;

SELECT 'Database Functions Created:' as section;
SELECT routine_name, routine_type
FROM information_schema.routines
WHERE routine_schema = 'public'
AND routine_name LIKE '%referral%' OR routine_name LIKE '%customer%' OR routine_name LIKE '%point%'
ORDER BY routine_name;

SELECT 'Tables and Columns:' as section;
SELECT table_name, column_name, data_type
FROM information_schema.columns
WHERE table_name IN ('customers', 'orders', 'customer_points', 'point_transactions', 'referral_settings')
AND column_name LIKE '%referral%' OR column_name LIKE '%point%'
ORDER BY table_name, column_name;